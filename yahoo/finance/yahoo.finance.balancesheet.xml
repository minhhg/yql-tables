<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Ryan Hoium
        </author>
        <description>
            Yahoo Finance - Balance Sheet v0.1
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='AAPL'
        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            	<key id="symbol" type="xs:string" paramType="variable" required="true" />
            	<key id="reporttype" type="xs:string" paramType="variable" default="balancesheet" required="false" />
            	<key id="timeframe" type="xs:string" paramType="variable" default="quarterly" required="false" />
            </inputs>
            <execute>
            <![CDATA[
var reporttype_code = "bs"; // Tell financials we want the balance sheet

//%begin-include lib/financials.inc

// Scraper for the financials: the income statement, the balance sheet, and
// the cash flow statement. Expects reporttype_code to indicate which ('is',
// 'bs', 'cf'). Hopefully, the three will remain scrapable by common code.

// -----------------------------------------------------------------------------
// Commonly needed functions ...

// Returns the text below the passed node as a trimmed string (YQL's trim
// method appears not to strip newlines).
function allText(node) {
    var text = [];
    for each (var x in node.descendants()) {
        if (x.nodeKind() == 'text')
            text.push(x);
    }
    return text.join(' ').replace(/^\s+|\s+$/g, '');
}

// Converts an HTML display name into a JavaScript identifier. Also
// splits out any parenthesized qualifying term, such as "ttm",
// "intraday", "mrq", or "yoy".
function makeFieldName(name) {
    name = String(name).replace(/:/g, '');
    var m = name.match(/^(.*?)\s*\((.+?)\)\s*$/);
    var term = null;
    if (m) {
        name = m[1];
        term = m[2];
    }
    name = name.replace(/\b(.)/g, function(s){
        return s.toUpperCase();
    });
    name = name.replace(/[\s-]+/g, '');
    name = name.replace(/%/g, 'Pct');
    name = name.replace(/&/g, 'And');
    name = name.replace(/([a-z])\//g, '$1To');
    name = name.replace(/\W/g, '');
    if (/^\d/.test(name))
        name = 'P_' + name;
    return {name:name, term:term};
}

// Normalizes suffixed Yahoo Finance numbers to numeric values.
// Deletes %-signs. Multiplies by scale, if provided.
function parseNumber(n, scale) {
    if (!n)
        return n;
    n = String(n);
    if (/^\s*(?:[nN]\/?[aA])|-\s*$/.test(n))
        return '';
    var m = n.match(/^\s*(?:\(\s*([0-9.,]+[bBmMkK%]?)\s*\))\s*$/);
    if (m)
        n = '-' + m[1];
    var m = n.match(/^\s*(?:([+-])\s*)?([0-9.,]+)\s*([BbMmKk%]?)\s*$/);
    if (!m)
        return n
    var value = (m[1] == '-' ? -1 : 1) * m[2].replace(/,/g, '');
    switch (m[3]) {
        case 'b':
        case 'B':
            value = +(value + 'e9');
            break;
        case 'm':
        case 'M':
            value = +(value + 'e6');
            break;
        case 'k':
        case 'K':
            value = +(value + 'e3');
            break;
        default:
            value = +value;
    }
    if (scale)
        value *= scale;
    return value;
}
// -----------------------------------------------------------------------------

// Assumes reporttype_code has been set to one of 'is', 'bs', or 'cf'.
var url = "http://finance.yahoo.com/q/" + reporttype_code + "?s=" + symbol + "&" + timeframe;
var restquery = y.rest(url);
var rawresult = restquery.accept("text/html").get().response;
var query = y.xpath(rawresult, "//table[@class='yfnc_tabledata1']//tr/td/table//tr");

// Process Results
var outputdata = <{reporttype} symbol={symbol} timeframe={timeframe}></{reporttype}>;
if (query.*.length() !== 0)
{
    var c = 0;
    var numcolumns = 0;
    var data_array = new Array();

    // Read Column Headings
    data_array[0] = new Array();
    data_array[0][0] = "Headings";
    for each (var node in query[0].*)
    {
        data_array[c] = new Array();
        data_array[c][0] = allText(node);
        c++;
    }
    numcolumns = c;

    // Read Rows
    var r = 1;
    var i = 1;
    while (i < query.length())
    {
        var row = query[i];
        if(row.td.length() >= numcolumns){
            c = 0;
            // read each column in row
            for each (var column in row.td){
                if ("spacer" in column)
                    continue;
                var dataitem = allText(column);
                if (c == 0)
                    dataitem = makeFieldName(dataitem).name;
                else
                    dataitem = parseNumber(dataitem, 1000);
                data_array[c][r] = dataitem;
                c++;
            }
            r++;
        }
        i++;
    }
    var numrows = r;

    // Append the results to the XML tree
    for(c = 1; c < numcolumns; c++){
        var period = data_array[c][0];
        var financial_period = <statement period={period}></statement>;
        for(r = 1; r < numrows; r++){
            row_name = data_array[0][r];
            data = data_array[c][r];
            financial_period.appendChild(<{row_name} report_row={r}>{data}</{row_name}>);
        }
        outputdata.appendChild(financial_period);
    }
}
response.object = outputdata;
//%end-include 99ffcfaadcfd783e96bb351bf2d9c6c430efc3e5
		]]>
            </execute>
        </select>
    </bindings>
</table>
